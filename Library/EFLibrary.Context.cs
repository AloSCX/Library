//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Library
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LibraryEntities : DbContext
    {
        public LibraryEntities()
            : base("name=LibraryEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Book> Book { get; set; }
        public virtual DbSet<Category> Category { get; set; }
    
        public virtual int DelBook(Nullable<int> idBook)
        {
            var idBookParameter = idBook.HasValue ?
                new ObjectParameter("IdBook", idBook) :
                new ObjectParameter("IdBook", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelBook", idBookParameter);
        }
    
        public virtual int DelCategory(Nullable<int> idCategory)
        {
            var idCategoryParameter = idCategory.HasValue ?
                new ObjectParameter("IdCategory", idCategory) :
                new ObjectParameter("IdCategory", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelCategory", idCategoryParameter);
        }
    
        public virtual ObjectResult<GetAllBook_Result> GetAllBook()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBook_Result>("GetAllBook");
        }
    
        public virtual ObjectResult<GetAllCategory_Result> GetAllCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCategory_Result>("GetAllCategory");
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsBook(string name, string authors, Nullable<System.DateTime> year, string theme, Nullable<int> idCategory)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var authorsParameter = authors != null ?
                new ObjectParameter("Authors", authors) :
                new ObjectParameter("Authors", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var themeParameter = theme != null ?
                new ObjectParameter("Theme", theme) :
                new ObjectParameter("Theme", typeof(string));
    
            var idCategoryParameter = idCategory.HasValue ?
                new ObjectParameter("IdCategory", idCategory) :
                new ObjectParameter("IdCategory", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsBook", nameParameter, authorsParameter, yearParameter, themeParameter, idCategoryParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsCategory(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsCategory", nameParameter);
        }
    
        public virtual ObjectResult<UpdBook_Result> UpdBook(Nullable<int> idBook, string name, string authors, Nullable<System.DateTime> year, string theme, Nullable<int> idCategory)
        {
            var idBookParameter = idBook.HasValue ?
                new ObjectParameter("IdBook", idBook) :
                new ObjectParameter("IdBook", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var authorsParameter = authors != null ?
                new ObjectParameter("Authors", authors) :
                new ObjectParameter("Authors", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var themeParameter = theme != null ?
                new ObjectParameter("Theme", theme) :
                new ObjectParameter("Theme", typeof(string));
    
            var idCategoryParameter = idCategory.HasValue ?
                new ObjectParameter("IdCategory", idCategory) :
                new ObjectParameter("IdCategory", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdBook_Result>("UpdBook", idBookParameter, nameParameter, authorsParameter, yearParameter, themeParameter, idCategoryParameter);
        }
    
        public virtual ObjectResult<UpdCategory_Result> UpdCategory(Nullable<int> idCategory, string name)
        {
            var idCategoryParameter = idCategory.HasValue ?
                new ObjectParameter("IdCategory", idCategory) :
                new ObjectParameter("IdCategory", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdCategory_Result>("UpdCategory", idCategoryParameter, nameParameter);
        }
    }
}
